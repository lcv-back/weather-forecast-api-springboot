openapi: 3.0.3
info:
  title: Weather Forecast APIs - SkyAPI Inc.
  version: 1.0.0
  description: >
    Reference design documentation of Weather Forecast
  termsOfService: https://skyweather.net/terms
  contact:
    email: vikimmich6@gmail.com
    name: Vi Le Cong Developer
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
    description: for testing on local computer
tags:
  - name: Location
    description: >
      APIs for location management (cities and regions in
      the world)
  - name: Realtime Weather
    description: >
      APIs for accessing and updating realtime weather data

paths:
  /v1/locations:
    get:
      tags:
        - Location
      summary: Returns a list of managed locations - available for weather forecast
      description: >
        Clients use this API to get list of managed locations.
      responses:
        "200":
          description: A JSON array of location objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
        "204":
          description: No locations found

    post:
      tags:
        - Location
      summary: Add a new location
      description: >
        Clients use this API to add a new location to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationRequest"
      responses:
        "201":
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationRequest"

        "400":
          description: Bad Request - Invalid location data

    put:
      tags:
        - Location
      summary: Update an existing location
      description: >
        Clients use this API to update an existing location in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationRequest"
      responses:
        "200":
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"

        "400":
          description: Bad Request - Invalid location data

        "404":
          description: Location not found

  /v1/locations/{code}:
    get:
      tags:
        - Location
      summary: Returns detailed information about the location with the given location code
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: The location code of the location to retrieve
      responses:
        "200":
          description: A JSON object representing the location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "404":
          description: Location not found
        "405":
          description: Method Not Allowed

    delete:
      tags:
        - Location
      summary: Removes an existing location found by a specific code
      description: Clients use this API to delete a specific location from database.
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: Code of the location to be deleted.
      responses:
        "204":
          description: Successfully delete operation. Location removed.
        "404":
          description: Code not found.

  /v1/realtime:
    get:
      tags:
        - Realtime Weather
      summary: Returns the current weather information
      description: >
        Returns the current weather information of the location based on client's IP address.
      responses:
        "200":
          description: Realtime weather data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeWeather"

  /v1/realtime/{code}:
    get:
      tags:
        - Realtime Weather
      summary: Get current weather data for a specific location
      description: >
        Returns the current weather information of a specific location identified by the given code.
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: Location code to get the weather data
      responses:
        "200":
          description: Realtime weather data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeWeather"
        "404":
          description: Location not found

    put:
      tags:
        - Realtime Weather
      summary: Update realtime weather data
      description: >
        Updates realtime weather data based on location code.
      parameters:
        - in: path
          name: code
          schema:
            type: string
          required: true
          description: Location code to update the weather data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RealtimeWeatherUpdate"
      responses:
        "200":
          description: Weather data updated successfully
        "404":
          description: Location not found

components:
  schemas:
    Location:
      type: object
      properties:
        code:
          type: string
          description: Unique code representing the location
        city_name:
          type: string
          description: Name of the city
        region_name:
          type: string
          description: Name of the region
        country_name:
          type: string
          description: Name of the country
        country_code:
          type: string
          description: ISO 3166-1 alpha-2 country code
        enabled:
          type: boolean
          description: Indicates whether the location is enabled for weather forecast
        trashed:
          type: boolean
          description: Indicates whether the location is marked as trashed
    LocationRequest:
      type: object
      properties:
        code:
          type: string
          description: Unique code representing the location
        city_name:
          type: string
          description: Name of the city
        region_name:
          type: string
          description: Name of the region
        country_name:
          type: string
          description: Name of the country
        country_code:
          type: string
          description: ISO 3166-1 alpha-2 country code
        enable:
          type: boolean
          description: Whether this code is active for weather forecast
    RealtimeWeather:
      type: object
      properties:
        location_code:
          type: string
          description: Unique code representing the location
        temperature:
          type: number
          format: float
          description: Current temperature in Celsius
        humidity:
          type: number
          format: float
          description: Current humidity percentage
        condition:
          type: string
          description: Weather condition description
    RealtimeWeatherUpdate:
      type: object
      properties:
        location_code:
          type: string
          description: Unique code representing the location
        temperature:
          type: number
          format: float
          description: Updated temperature in Celsius
        humidity:
          type: number
          format: float
          description: Updated humidity percentage
        condition:
          type: string
          description: Updated weather condition description
